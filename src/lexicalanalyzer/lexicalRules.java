/* The following code was generated by JFlex 1.6.1 */

package lexicalanalyzer;
import static lexicalanalyzer.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Oscar/Google Drive/Quinto Ciclo/Lenguajes formales y aut√≥matas/Proyectos/lexicalAnalyzer_1194216/lexicalAnalyzerPHP/src/lexicalanalyzer/lexicalRules.jflex</tt>
 */
class lexicalRules {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\53\1\53\1\2\22\0\1\1\1\45\1\54"+
    "\1\72\1\64\1\41\1\44\1\51\1\55\1\57\1\37\1\36\1\56"+
    "\1\36\1\50\1\40\11\4\1\71\1\65\1\65\1\47\1\42\1\46"+
    "\1\66\1\65\1\7\1\21\1\12\1\24\1\17\1\30\1\34\1\6"+
    "\1\61\1\60\1\63\1\10\1\14\1\23\1\13\1\15\1\35\1\20"+
    "\1\62\1\11\1\27\1\32\1\31\1\33\1\25\1\60\1\67\1\52"+
    "\1\70\1\0\1\5\1\0\1\7\1\21\1\12\1\24\1\17\1\30"+
    "\1\34\1\6\1\61\1\60\1\63\1\10\1\14\1\23\1\13\1\15"+
    "\1\35\1\20\1\62\1\11\1\27\1\32\1\31\1\33\1\25\1\60"+
    "\1\65\1\43\1\65\7\0\1\53\32\0\1\1\217\0\2\16\115\0"+
    "\1\22\u1500\0\1\1\u097f\0\13\1\35\0\1\53\1\53\5\0\1\1"+
    "\57\0\1\1\312\0\1\26\u0ed5\0\1\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\10\4\1\1\3\4\1\1"+
    "\10\4\5\5\2\1\2\5\1\6\2\1\1\6\2\4"+
    "\1\1\1\6\1\3\1\7\1\3\1\0\1\3\3\4"+
    "\1\10\1\4\1\10\1\0\10\4\3\0\10\4\2\0"+
    "\2\4\1\0\5\4\1\0\5\4\6\0\1\3\3\0"+
    "\4\4\6\11\2\0\11\4\1\0\1\4\1\0\11\4"+
    "\1\0\2\4\6\0\11\4\2\0\5\4\1\10\1\0"+
    "\1\4\1\0\2\4\2\0\1\1\2\0\6\4\1\0"+
    "\4\11\1\0\2\11\1\0\1\11\1\0\4\11\1\4"+
    "\1\0\5\4\1\0\1\4\1\0\3\4\1\0\3\4"+
    "\1\0\3\4\1\0\2\4\4\0\2\10\2\0\10\4"+
    "\2\0\3\4\1\0\2\4\1\0\1\4\2\0\1\7"+
    "\1\0\4\4\4\11\2\0\3\11\4\0\1\11\1\0"+
    "\4\11\1\4\1\0\5\4\1\0\2\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\4\1\0\1\4\5\0\3\4"+
    "\1\0\1\4\2\0\3\4\1\0\2\4\1\7\1\0"+
    "\5\4\1\11\1\0\1\12\1\11\3\0\1\11\2\0"+
    "\1\11\2\0\2\11\1\0\1\11\1\10\2\11\1\4"+
    "\1\0\1\4\1\0\3\4\1\0\2\4\1\0\1\4"+
    "\1\0\2\4\5\0\2\4\1\0\1\4\1\0\4\4"+
    "\1\0\1\11\1\12\1\11\3\0\1\11\2\0\2\11"+
    "\1\0\3\11\2\4\1\0\1\4\1\12\2\4\2\0"+
    "\1\10\2\0\1\10\1\4\2\0\3\4\1\0\1\11"+
    "\2\0\2\11\1\13\2\11\1\4\1\0\1\4\1\0"+
    "\1\4\2\0\1\4\1\0\1\4\1\0\4\11\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\11"+
    "\1\0\2\11\1\4\1\0\1\11\1\0\2\11\1\4"+
    "\1\0\1\11\1\0\2\11\1\0\1\4\3\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\4\5\0\1\11"+
    "\1\0\1\11\1\0\1\14\3\0\1\11\1\0\1\11"+
    "\4\0\1\11\1\0\1\11\3\0\1\11\1\0\1\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\1\0\3\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[497];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\73\0\166\0\261\0\354\0\u0127\0\u0162"+
    "\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a"+
    "\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512"+
    "\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\73\0\u0674\0\u06af"+
    "\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\73\0\u084c"+
    "\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24"+
    "\0\u0a5f\0\u0a9a\0\u0ad5\0\73\0\u0b10\0\u0127\0\u0b4b\0\u0b86"+
    "\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e"+
    "\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36"+
    "\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e"+
    "\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6"+
    "\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u07d6"+
    "\0\73\0\u14be\0\u0811\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5"+
    "\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd"+
    "\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995"+
    "\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d"+
    "\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45"+
    "\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d"+
    "\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5"+
    "\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd"+
    "\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5"+
    "\0\u24e0\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642\0\u267d"+
    "\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855"+
    "\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d"+
    "\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05"+
    "\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd"+
    "\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5"+
    "\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u3152\0\u318d"+
    "\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365"+
    "\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d"+
    "\0\u246a\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da"+
    "\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3877\0\u38b2"+
    "\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u3a4f\0\u3a8a"+
    "\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec\0\u3c27\0\u3c62"+
    "\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff\0\u3e3a"+
    "\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7\0\u4012"+
    "\0\u404d\0\u4088\0\u40c3\0\u40fe\0\u4139\0\u4174\0\u41af\0\u41ea"+
    "\0\u4225\0\u4260\0\u429b\0\u42d6\0\u4311\0\u434c\0\u4387\0\u43c2"+
    "\0\u43fd\0\73\0\u35b3\0\u4438\0\u4473\0\u44ae\0\u44e9\0\u4524"+
    "\0\u455f\0\u459a\0\u16d1\0\u45d5\0\u4610\0\u464b\0\u4686\0\u46c1"+
    "\0\u46fc\0\u4737\0\u4772\0\u47ad\0\u47e8\0\u4823\0\u485e\0\u4899"+
    "\0\u48d4\0\u16d1\0\u490f\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36"+
    "\0\u4a71\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e"+
    "\0\u4c49\0\u4c84\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70\0\u4dab\0\u4de6"+
    "\0\u4e21\0\u4e5c\0\u4e97\0\u4ed2\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe"+
    "\0\u4ff9\0\u5034\0\u506f\0\73\0\u50aa\0\u50e5\0\u5120\0\u515b"+
    "\0\u5196\0\u51d1\0\u520c\0\u5247\0\u5282\0\u52bd\0\u52f8\0\u5333"+
    "\0\u536e\0\u53a9\0\u53e4\0\u541f\0\u545a\0\u0127\0\u5495\0\u54d0"+
    "\0\u550b\0\u5546\0\u5581\0\u55bc\0\u55f7\0\u5632\0\u566d\0\u56a8"+
    "\0\u56e3\0\u571e\0\u5759\0\u5794\0\u57cf\0\u580a\0\u5845\0\u5880"+
    "\0\u58bb\0\u58f6\0\73\0\u5931\0\u596c\0\u59a7\0\u59e2\0\u5a1d"+
    "\0\u5a58\0\u5a93\0\u5ace\0\u5b09\0\u5b44\0\u5b7f\0\u5bba\0\u5bf5"+
    "\0\u5c30\0\u5c6b\0\u5ca6\0\u5ce1\0\u5d1c\0\u5d57\0\u5d92\0\u5dcd"+
    "\0\u5e08\0\u5e43\0\u5e7e\0\u5eb9\0\u5ef4\0\u5f2f\0\u5f6a\0\u5fa5"+
    "\0\u5fe0\0\u601b\0\u6056\0\u6091\0\u60cc\0\u6107\0\u6142\0\u617d"+
    "\0\u61b8\0\u61f3\0\u622e\0\u6269\0\u62a4\0\u62df\0\u631a\0\u6355"+
    "\0\u6390\0\u63cb\0\u6406\0\u6441\0\u647c\0\u64b7\0\u64f2\0\u652d"+
    "\0\u6568\0\u65a3\0\u65de\0\u6619\0\u6654\0\u668f\0\u66ca\0\u6705"+
    "\0\u6740\0\73\0\u677b\0\u67b6\0\u67f1\0\u682c\0\u6867\0\u68a2"+
    "\0\u68dd\0\u6918\0\u6953\0\u698e\0\u69c9\0\u6a04\0\u6a3f\0\u6a7a"+
    "\0\u6ab5\0\u6af0\0\u6b2b\0\u6b66\0\u6ba1\0\u6bdc\0\u6c17\0\u6c52"+
    "\0\u6c8d\0\u6cc8\0\u6d03\0\u6d3e\0\u6d79\0\u6db4\0\u6def\0\u6e2a"+
    "\0\u6e65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[497];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\7\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\7\1\2\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\7\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\2\42\1\43\1\44"+
    "\1\45\1\2\1\3\1\46\3\47\1\7\1\50\1\51"+
    "\1\7\1\52\1\47\1\53\2\47\1\54\1\55\76\0"+
    "\1\3\73\0\1\56\12\0\1\57\30\0\1\60\20\0"+
    "\1\56\5\0\1\7\1\61\10\7\1\0\3\7\1\0"+
    "\3\7\1\0\7\7\22\0\4\7\5\0\1\7\5\0"+
    "\12\7\1\0\3\7\1\0\3\7\1\0\7\7\22\0"+
    "\4\7\5\0\1\7\5\0\12\7\1\0\1\7\1\62"+
    "\1\63\1\64\1\65\2\7\1\0\7\7\22\0\2\7"+
    "\1\66\1\7\5\0\1\7\5\0\12\7\1\67\3\7"+
    "\1\0\3\7\1\0\7\7\22\0\1\7\1\70\2\7"+
    "\5\0\1\7\5\0\2\7\1\71\7\7\1\0\1\7"+
    "\1\72\1\7\1\0\3\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\5\0\3\7\1\73\1\74\2\7\1\75"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\7\7\22\0"+
    "\4\7\5\0\1\7\5\0\12\7\1\0\1\7\1\66"+
    "\1\7\1\0\3\7\1\0\7\7\22\0\4\7\5\0"+
    "\1\7\5\0\12\7\1\0\1\7\1\76\1\7\1\0"+
    "\3\7\1\0\1\77\6\7\22\0\4\7\5\0\1\7"+
    "\15\0\1\100\5\0\1\101\1\102\4\0\1\64\31\0"+
    "\1\101\14\0\4\7\1\103\1\7\1\104\1\7\1\105"+
    "\1\7\1\0\3\7\1\0\1\106\2\7\1\0\3\7"+
    "\1\107\1\110\2\7\22\0\4\7\5\0\1\7\5\0"+
    "\12\7\1\0\1\111\2\7\1\0\3\7\1\0\7\7"+
    "\22\0\4\7\5\0\1\7\5\0\12\7\1\0\1\7"+
    "\1\112\1\7\1\0\3\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\12\0\1\113\17\0\1\114\45\0\3\7"+
    "\1\115\6\7\1\0\1\116\2\7\1\0\3\7\1\0"+
    "\7\7\22\0\4\7\5\0\1\7\5\0\7\7\1\66"+
    "\2\7\1\117\1\120\2\7\1\0\3\7\1\0\7\7"+
    "\22\0\1\7\1\121\2\7\5\0\1\7\5\0\12\7"+
    "\1\0\3\7\1\117\1\122\2\7\1\0\7\7\22\0"+
    "\2\7\1\121\1\7\5\0\1\7\5\0\3\7\1\123"+
    "\3\7\1\124\2\7\1\125\3\7\1\0\3\7\1\0"+
    "\1\126\6\7\22\0\1\7\1\127\2\7\5\0\1\7"+
    "\5\0\2\7\1\130\7\7\1\0\3\7\1\0\3\7"+
    "\1\0\7\7\22\0\4\7\5\0\1\7\5\0\3\7"+
    "\1\14\6\7\1\0\3\7\1\0\3\7\1\0\7\7"+
    "\22\0\4\7\5\0\1\7\5\0\7\7\1\14\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\5\0\4\7\1\131\2\7\1\132\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\5\0\1\133\43\0\1\134\20\0\1\133"+
    "\40\0\1\36\72\0\1\135\1\55\74\0\1\36\2\0"+
    "\1\136\67\0\2\36\73\0\1\36\70\0\1\36\72\0"+
    "\1\36\23\0\1\137\10\0\1\60\64\0\1\60\1\0"+
    "\51\140\1\141\1\142\20\140\52\143\1\144\1\143\1\141"+
    "\16\143\4\0\10\7\1\145\1\7\1\0\3\7\1\101"+
    "\1\146\2\7\1\0\1\7\1\66\5\7\22\0\2\7"+
    "\1\122\1\7\5\0\1\7\5\0\5\7\1\147\4\7"+
    "\1\0\3\7\1\0\3\7\1\0\2\7\1\150\4\7"+
    "\22\0\4\7\5\0\1\7\6\0\1\151\1\152\1\153"+
    "\5\154\1\155\1\0\3\154\1\0\3\154\1\0\5\154"+
    "\1\156\1\154\22\0\4\154\55\0\1\47\30\0\1\56"+
    "\10\0\1\157\1\0\1\57\30\0\1\60\20\0\1\56"+
    "\1\0\2\55\2\0\67\55\4\0\1\56\43\0\1\60"+
    "\20\0\1\56\5\0\1\141\31\0\1\160\32\0\1\141"+
    "\5\0\1\60\12\0\1\57\51\0\1\60\5\0\2\7"+
    "\1\161\1\7\1\162\1\163\1\164\1\7\1\165\1\7"+
    "\1\0\3\7\1\0\1\166\1\167\1\7\1\0\1\7"+
    "\1\170\5\7\22\0\4\7\5\0\1\7\5\0\12\7"+
    "\1\0\1\7\1\171\1\7\1\0\3\7\1\0\7\7"+
    "\22\0\4\7\5\0\1\7\5\0\12\7\1\0\3\7"+
    "\1\172\3\7\1\0\7\7\22\0\2\7\1\173\1\7"+
    "\5\0\1\7\5\0\12\7\1\0\3\7\1\0\1\7"+
    "\1\66\1\7\1\0\7\7\22\0\4\7\5\0\1\7"+
    "\23\0\1\174\37\0\1\174\14\0\12\7\1\0\3\7"+
    "\1\174\3\7\1\0\7\7\22\0\2\7\1\175\1\7"+
    "\5\0\1\7\5\0\12\7\1\0\1\7\1\176\1\7"+
    "\1\0\3\7\1\0\7\7\22\0\4\7\5\0\1\7"+
    "\5\0\3\7\1\177\6\7\1\0\3\7\1\0\2\7"+
    "\1\66\1\0\1\121\6\7\22\0\4\7\5\0\1\7"+
    "\5\0\4\7\1\200\1\201\4\7\1\0\3\7\1\117"+
    "\3\7\1\0\7\7\22\0\2\7\1\121\1\7\5\0"+
    "\1\7\5\0\3\7\1\202\3\7\1\203\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\7\7\22\0\4\7\5\0"+
    "\1\7\5\0\12\7\1\0\3\7\1\0\1\204\2\7"+
    "\1\0\7\7\22\0\4\7\5\0\1\7\5\0\7\7"+
    "\1\205\2\7\1\206\3\7\1\0\3\7\1\0\7\7"+
    "\22\0\1\7\1\207\2\7\5\0\1\7\5\0\12\7"+
    "\1\0\2\7\1\210\1\0\3\7\1\0\7\7\22\0"+
    "\4\7\5\0\1\7\16\0\1\211\77\0\1\212\37\0"+
    "\1\212\21\0\1\213\1\214\7\0\1\215\37\0\1\215"+
    "\14\0\12\7\1\0\3\7\1\216\3\7\1\0\7\7"+
    "\22\0\2\7\1\217\1\7\5\0\1\7\5\0\2\7"+
    "\1\220\7\7\1\0\3\7\1\0\3\7\1\0\7\7"+
    "\22\0\4\7\5\0\1\7\5\0\11\7\1\221\1\0"+
    "\3\7\1\0\3\7\1\0\7\7\22\0\4\7\5\0"+
    "\1\7\5\0\12\7\1\0\3\7\1\0\1\7\1\222"+
    "\1\7\1\0\7\7\22\0\4\7\5\0\1\7\5\0"+
    "\3\7\1\223\6\7\1\0\3\7\1\0\3\7\1\0"+
    "\7\7\22\0\4\7\5\0\1\7\5\0\5\7\1\224"+
    "\4\7\1\174\3\7\1\0\3\7\1\0\7\7\22\0"+
    "\1\7\1\175\2\7\5\0\1\7\5\0\5\7\1\225"+
    "\4\7\1\0\3\7\1\0\3\7\1\0\6\7\1\226"+
    "\22\0\4\7\5\0\1\7\5\0\12\7\1\0\1\227"+
    "\2\7\1\0\3\7\1\0\7\7\22\0\4\7\5\0"+
    "\1\7\10\0\1\230\101\0\1\231\42\0\1\231\15\0"+
    "\10\7\1\232\1\7\1\0\3\7\1\0\3\7\1\0"+
    "\7\7\22\0\4\7\5\0\1\7\5\0\12\7\1\0"+
    "\3\7\1\0\3\7\1\0\2\7\1\66\4\7\22\0"+
    "\4\7\5\0\1\7\20\0\1\64\57\0\6\7\1\233"+
    "\3\7\1\0\3\7\1\0\3\7\1\0\1\7\1\234"+
    "\5\7\22\0\4\7\5\0\1\7\5\0\12\7\1\0"+
    "\1\66\2\7\1\0\3\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\5\0\12\7\1\0\3\7\1\212\3\7"+
    "\1\0\7\7\22\0\2\7\1\235\1\7\5\0\1\7"+
    "\5\0\4\7\1\236\5\7\1\0\3\7\1\0\3\7"+
    "\1\0\7\7\22\0\4\7\5\0\1\7\5\0\12\7"+
    "\1\0\1\7\1\237\1\7\1\0\3\7\1\0\7\7"+
    "\22\0\4\7\5\0\1\7\24\0\1\240\53\0\12\7"+
    "\1\0\3\7\1\0\1\241\2\7\1\0\7\7\22\0"+
    "\4\7\5\0\1\7\5\0\12\7\1\0\3\7\1\0"+
    "\1\107\2\7\1\0\7\7\22\0\4\7\5\0\1\7"+
    "\5\0\12\7\1\242\3\7\1\0\3\7\1\0\7\7"+
    "\22\0\1\7\1\243\2\7\5\0\1\7\5\0\7\7"+
    "\1\244\2\7\1\0\3\7\1\0\3\7\1\0\7\7"+
    "\22\0\4\7\5\0\1\7\5\0\5\7\1\220\4\7"+
    "\1\0\3\7\1\0\3\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\5\0\1\245\12\0\1\57\30\0\1\246"+
    "\20\0\1\245\5\0\1\246\64\0\1\246\1\0\3\135"+
    "\1\247\33\135\1\250\33\135\42\0\1\2\45\0\1\251"+
    "\55\0\2\140\2\0\47\140\1\0\17\140\2\143\2\0"+
    "\47\143\1\0\17\143\4\0\11\7\1\252\1\0\3\7"+
    "\1\0\3\7\1\0\7\7\22\0\4\7\5\0\1\7"+
    "\5\0\5\7\1\253\1\254\3\7\1\0\3\7\1\215"+
    "\3\7\1\0\7\7\22\0\2\7\1\255\1\7\5\0"+
    "\1\7\5\0\3\7\1\256\6\7\1\0\3\7\1\0"+
    "\3\7\1\0\7\7\22\0\4\7\5\0\1\7\5\0"+
    "\12\7\1\231\3\7\1\0\3\7\1\0\7\7\22\0"+
    "\1\7\1\257\2\7\5\0\1\7\2\0\3\260\6\154"+
    "\1\261\2\154\1\262\1\0\1\263\1\264\1\154\1\265"+
    "\3\154\1\0\1\154\1\266\3\154\1\267\1\154\4\0"+
    "\1\270\10\0\1\260\4\0\2\154\1\271\1\154\3\0"+
    "\1\272\1\0\1\154\2\0\3\260\5\154\1\273\4\154"+
    "\1\0\3\154\1\0\3\154\1\0\7\154\4\0\1\270"+
    "\10\0\1\260\4\0\4\154\3\0\1\272\1\0\1\154"+
    "\2\0\3\260\12\154\1\0\1\154\1\274\1\154\1\0"+
    "\3\154\1\0\7\154\4\0\1\270\10\0\1\260\4\0"+
    "\4\154\3\0\1\272\1\0\1\154\2\0\3\260\12\154"+
    "\1\0\3\154\1\0\3\154\1\0\7\154\4\0\1\270"+
    "\10\0\1\260\4\0\4\154\3\0\1\272\1\0\1\154"+
    "\2\0\3\260\2\154\1\275\7\154\1\0\3\154\1\0"+
    "\3\154\1\0\7\154\4\0\1\270\10\0\1\260\4\0"+
    "\4\154\3\0\1\272\1\0\1\154\2\0\3\260\4\154"+
    "\1\276\5\154\1\0\3\154\1\0\3\154\1\0\7\154"+
    "\4\0\1\270\10\0\1\260\4\0\4\154\3\0\1\272"+
    "\1\0\1\154\12\0\1\47\65\0\1\141\64\0\1\141"+
    "\5\0\3\7\1\277\6\7\1\0\3\7\1\0\3\7"+
    "\1\0\7\7\22\0\4\7\5\0\1\7\5\0\12\7"+
    "\1\300\3\7\1\0\3\7\1\0\7\7\22\0\1\7"+
    "\1\301\2\7\5\0\1\7\5\0\12\7\1\0\1\7"+
    "\1\302\1\7\1\0\3\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\5\0\4\7\1\303\5\7\1\0\3\7"+
    "\1\0\3\7\1\0\7\7\22\0\4\7\5\0\1\7"+
    "\5\0\12\7\1\0\1\304\2\7\1\0\3\7\1\0"+
    "\7\7\22\0\4\7\5\0\1\7\5\0\3\7\1\305"+
    "\6\7\1\0\3\7\1\0\3\7\1\0\7\7\22\0"+
    "\4\7\5\0\1\7\5\0\12\7\1\306\3\7\1\0"+
    "\3\7\1\0\7\7\22\0\1\7\1\307\2\7\5\0"+
    "\1\7\5\0\12\7\1\310\3\7\1\0\3\7\1\0"+
    "\1\311\6\7\22\0\1\7\1\312\2\7\5\0\1\7"+
    "\5\0\3\7\1\313\6\7\1\0\3\7\1\0\3\7"+
    "\1\0\7\7\22\0\4\7\5\0\1\7\12\0\1\314"+
    "\65\0\5\7\1\315\4\7\1\0\3\7\1\0\3\7"+
    "\1\0\7\7\22\0\4\7\5\0\1\7\12\0\1\64"+
    "\65\0\5\7\1\66\4\7\1\0\3\7\1\0\3\7"+
    "\1\0\7\7\22\0\4\7\5\0\1\7\5\0\7\7"+
    "\1\116\2\7\1\0\3\7\1\0\3\7\1\0\7\7"+
    "\22\0\4\7\5\0\1\7\5\0\12\7\1\174\3\7"+
    "\1\0\3\7\1\0\7\7\22\0\1\7\1\175\2\7"+
    "\5\0\1\7\5\0\4\7\1\316\5\7\1\0\3\7"+
    "\1\0\3\7\1\0\7\7\22\0\4\7\5\0\1\7"+
    "\5\0\6\7\1\317\3\7\1\0\3\7\1\0\3\7"+
    "\1\0\7\7\22\0\4\7\5\0\1\7\5\0\12\7"+
    "\1\0\3\7\1\320\3\7\1\0\7\7\22\0\2\7"+
    "\1\321\1\7\5\0\1\7\5\0\12\7\1\0\3\7"+
    "\1\0\1\121\2\7\1\0\7\7\22\0\4\7\5\0"+
    "\1\7\5\0\5\7\1\322\4\7\1\0\3\7\1\174"+
    "\3\7\1\0\7\7\22\0\2\7\1\175\1\7\5\0"+
    "\1\7\5\0\5\7\1\323\4\7\1\0\3\7\1\0"+
    "\3\7\1\0\7\7\22\0\4\7\5\0\1\7\24\0"+
    "\1\174\6\0\1\324\44\0\12\7\1\0\3\7\1\0"+
    "\1\175\2\7\1\0\3\7\1\325\3\7\22\0\4\7"+
    "\5\0\1\7\5\0\4\7\1\326\5\7\1\0\3\7"+
    "\1\0\3\7\1\0\7\7\22\0\4\7\5\0\1\7"+
    "\11\0\1\327\101\0\1\174\72\0\1\330\63\0\1\331"+
    "\73\0\1\332\100\0\1\333\57\0\12\7\1\0\1\334"+
    "\2\7\1\0\3\7\1\0\7\7\22\0\4\7\5\0"+
    "\1\7\5\0\7\7\1\66\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\7\7\22\0\4\7\5\0\1\7\5\0"+
    "\5\7\1\313\4\7\1\0\3\7\1\0\3\7\1\0"+
    "\7\7\22\0\4\7\5\0\1\7\5\0\12\7\1\335"+
    "\3\7\1\336\1\7\1\337\1\7\1\0\1\7\1\340"+
    "\1\27\4\7\22\0\1\7\1\341\1\342\1\7\5\0"+
    "\1\7\5\0\4\7\1\66\5\7\1\0\3\7\1\0"+
    "\3\7\1\0\7\7\22\0\4\7\5\0\1\7\5\0"+
    "\12\7\1\0\1\343\2\7\1\0\3\7\1\0\7\7"+
    "\22\0\4\7\5\0\1\7\5\0\12\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\344\6\7\22\0\4\7\5\0"+
    "\1\7\5\0\12\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\345\6\7\22\0\4\7\5\0\1\7\5\0\3\7"+
    "\1\346\6\7\1\0\3\7\1\0\3\7\1\0\7\7"+
    "\22\0\4\7\5\0\1\7\12\0\1\347\72\0\1\350"+
    "\65\0\12\7\1\0\1\351\2\7\1\0\3\7\1\0"+
    "\7\7\22\0\4\7\5\0\1\7\5\0\4\7\1\352"+
    "\5\7\1\0\3\7\1\0\3\7\1\0\7\7\22\0"+
    "\4\7\5\0\1\7\5\0\3\7\1\353\6\7\1\354"+
    "\3\7\1\0\3\7\1\0\7\7\22\0\1\7\1\355"+
    "\2\7\5\0\1\7\5\0\12\7\1\0\1\175\2\7"+
    "\1\0\3\7\1\0\7\7\22\0\4\7\5\0\1\7"+
    "\5\0\12\7\1\0\3\7\1\117\3\7\1\0\7\7"+
    "\22\0\2\7\1\121\1\7\5\0\1\7\5\0\12\7"+
    "\1\0\1\356\2\7\1\0\3\7\1\0\7\7\22\0"+
    "\4\7\5\0\1\7\10\0\1\357\67\0\6\7\1\360"+
    "\3\7\1\0\3\7\1\0\3\7\1\0\7\7\22\0"+
    "\4\7\5\0\1\7\11\0\1\117\66\0\4\7\1\121"+
    "\5\7\1\0\3\7\1\0\3\7\1\0\7\7\22\0"+
    "\4\7\5\0\1\7\5\0\12\7\1\0\2\7\1\107"+
    "\1\0\3\7\1\0\7\7\22\0\4\7\5\0\1\7"+
    "\5\0\1\245\43\0\1\246\20\0\1\245\5\0\1\246"+
    "\12\0\1\57\51\0\1\246\1\0\37\361\1\362\33\361"+
    "\3\135\1\247\33\135\1\250\1\363\32\135\6\0\1\364"+
    "\70\0\4\7\1\365\5\7\1\0\3\7\1\0\3\7"+
    "\1\0\7\7\22\0\4\7\5\0\1\7\5\0\12\7"+
    "\1\0\1\366\2\7\1\0\3\7\1\0\7\7\22\0"+
    "\4\7\5\0\1\7\5\0\4\7\1\367\5\7\1\0"+
    "\3\7\1\0\3\7\1\0\7\7\22\0\4\7\5\0"+
    "\1\7\5\0\5\7\1\370\4\7\1\0\3\7\1\0"+
    "\3\7\1\0\7\7\22\0\4\7\5\0\1\7\5\0"+
    "\5\7\1\326\4\7\1\0\3\7\1\0\3\7\1\0"+
    "\7\7\22\0\4\7\5\0\1\7\5\0\5\7\1\201"+
    "\4\7\1\0\3\7\1\0\3\7\1\0\7\7\22\0"+
    "\4\7\5\0\1\7\2\0\3\260\36\0\1\270\10\0"+
    "\1\260\20\0\3\260\7\154\1\371\2\154\1\0\3\154"+
    "\1\0\3\154\1\0\7\154\4\0\1\270\10\0\1\260"+
    "\4\0\4\154\3\0\1\272\1\0\1\154\2\0\3\260"+
    "\7\154\1\372\2\154\1\0\3\154\1\0\3\154\1\0"+
    "\7\154\4\0\1\270\10\0\1\260\4\0\4\154\3\0"+
    "\1\272\1\0\1\154\2\0\3\260\12\154\1\0\3\154"+
    "\1\0\1\373\2\154\1\0\7\154\4\0\1\270\10\0"+
    "\1\260\4\0\4\154\3\0\1\272\1\0\1\154\2\0"+
    "\3\260\12\154\1\0\1\374\2\154\1\0\3\154\1\0"+
    "\7\154\4\0\1\270\10\0\1\260\4\0\4\154\3\0"+
    "\1\272\1\0\1\154\20\0\1\375\54\0\3\260\12\154"+
    "\1\376\3\154\1\0\3\154\1\0\7\154\4\0\1\270"+
    "\10\0\1\260\4\0\1\154\1\377\2\154\3\0\1\272"+
    "\1\0\1\154\2\0\3\260\12\154\1\0\1\u0100\2\154"+
    "\1\0\3\154\1\0\7\154\4\0\1\270\10\0\1\260"+
    "\4\0\4\154\3\0\1\272\1\0\1\154\2\0\3\270"+
    "\1\u0101\4\0\1\u0102\16\0\1\u0103\20\0\1\u0104\1\0"+
    "\1\270\1\u0105\14\0\1\u0101\2\0\3\260\12\154\1\0"+
    "\1\u0106\2\154\1\0\3\154\1\0\7\154\4\0\1\270"+
    "\10\0\1\260\4\0\4\154\3\0\1\272\1\0\1\154"+
    "\52\0\1\u0107\22\0\3\260\5\154\1\u0108\4\154\1\0"+
    "\3\154\1\0\3\154\1\0\7\154\4\0\1\270\10\0"+
    "\1\260\4\0\4\154\3\0\1\272\1\0\1\154\2\0"+
    "\3\260\12\154\1\0\3\154\1\0\3\154\1\0\5\154"+
    "\1\u0109\1\154\4\0\1\270\10\0\1\260\4\0\4\154"+
    "\3\0\1\272\1\0\1\154\2\0\3\260\11\154\1\u010a"+
    "\1\0\3\154\1\0\3\154\1\0\7\154\4\0\1\270"+
    "\10\0\1\260\4\0\4\154\3\0\1\272\1\0\1\154"+
    "\2\0\3\260\7\154\1\u010b\2\154\1\0\3\154\1\0"+
    "\3\154\1\0\7\154\4\0\1\270\10\0\1\260\4\0"+
    "\4\154\3\0\1\272\1\0\1\154\5\0\4\7\1\u010c"+
    "\5\7\1\0\3\7\1\0\3\7\1\0\7\7\22\0"+
    "\4\7\5\0\1\7\24\0\1\u010d\53\0\12\7\1\0"+
    "\3\7\1\0\1\u010e\2\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\5\0\3\7\1\u010f\6\7\1\0\3\7"+
    "\1\0\3\7\1\0\7\7\22\0\4\7\5\0\1\7"+
    "\5\0\3\7\1\u0110\6\7\1\0\3\7\1\0\3\7"+
    "\1\0\7\7\22\0\4\7\5\0\1\7\5\0\5\7"+
    "\1\u0111\4\7\1\0\3\7\1\0\3\7\1\0\7\7"+
    "\22\0\4\7\5\0\1\7\5\0\10\7\1\u0112\1\7"+
    "\1\0\3\7\1\0\3\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\21\0\1\u0113\56\0\12\7\1\0\1\7"+
    "\1\u0114\1\7\1\0\3\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\11\0\1\u010d\66\0\12\7\1\0\3\7"+
    "\1\0\1\u0115\2\7\1\0\7\7\22\0\4\7\5\0"+
    "\1\7\5\0\4\7\1\u010e\5\7\1\0\3\7\1\0"+
    "\3\7\1\0\7\7\22\0\4\7\5\0\1\7\5\0"+
    "\12\7\1\0\3\7\1\0\2\7\1\66\1\0\7\7"+
    "\22\0\4\7\5\0\1\7\21\0\1\u0116\56\0\12\7"+
    "\1\0\1\7\1\u0117\1\7\1\0\3\7\1\0\7\7"+
    "\22\0\4\7\5\0\1\7\5\0\3\7\1\u0118\6\7"+
    "\1\0\3\7\1\0\3\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\5\0\2\7\1\66\7\7\1\0\3\7"+
    "\1\0\3\7\1\0\7\7\22\0\4\7\5\0\1\7"+
    "\23\0\1\64\37\0\1\64\14\0\12\7\1\0\3\7"+
    "\1\64\3\7\1\0\7\7\22\0\2\7\1\66\1\7"+
    "\5\0\1\7\5\0\12\7\1\u0119\3\7\1\0\3\7"+
    "\1\0\7\7\22\0\1\7\1\u011a\2\7\5\0\1\7"+
    "\5\0\12\7\1\0\1\u011b\2\7\1\0\3\7\1\0"+
    "\7\7\22\0\4\7\5\0\1\7\10\0\1\u011c\67\0"+
    "\3\7\1\u011d\6\7\1\0\3\7\1\0\3\7\1\0"+
    "\7\7\22\0\4\7\5\0\1\7\5\0\12\7\1\u011e"+
    "\3\7\1\0\3\7\1\0\7\7\22\0\1\7\1\u011f"+
    "\2\7\5\0\1\7\20\0\1\u0120\73\0\1\u0121\101\0"+
    "\1\u0122\52\0\1\u0123\7\0\1\u0124\71\0\1\335\42\0"+
    "\1\335\15\0\12\7\1\335\3\7\1\0\3\7\1\0"+
    "\7\7\22\0\1\7\1\341\2\7\5\0\1\7\31\0"+
    "\1\64\73\0\1\114\45\0\12\7\1\0\1\u0125\2\7"+
    "\1\0\3\7\1\0\7\7\22\0\4\7\5\0\1\7"+
    "\5\0\7\7\1\124\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\7\7\22\0\4\7\5\0\1\7\5\0\12\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\66\5\7"+
    "\22\0\4\7\5\0\1\7\5\0\12\7\1\0\3\7"+
    "\1\0\3\7\1\0\2\7\1\150\4\7\22\0\4\7"+
    "\5\0\1\7\5\0\12\7\1\0\3\7\1\0\1\u0126"+
    "\2\7\1\0\7\7\22\0\4\7\5\0\1\7\5\0"+
    "\12\7\1\0\1\7\1\u0127\1\7\1\0\3\7\1\0"+
    "\7\7\22\0\4\7\5\0\1\7\5\0\12\7\1\u0128"+
    "\3\7\1\0\3\7\1\0\7\7\22\0\1\7\1\u0129"+
    "\2\7\5\0\1\7\5\0\12\7\1\0\3\7\1\0"+
    "\3\7\1\64\7\7\22\0\3\7\1\66\5\0\1\7"+
    "\17\0\1\u011e\42\0\1\u011e\23\0\1\u012a\64\0\12\7"+
    "\1\0\3\7\1\u012b\3\7\1\0\7\7\22\0\2\7"+
    "\1\u012c\1\7\5\0\1\7\5\0\3\7\1\u012d\6\7"+
    "\1\0\3\7\1\0\3\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\5\0\12\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\u012e\6\7\22\0\4\7\5\0\1\7\24\0"+
    "\1\u012f\53\0\12\7\1\0\3\7\1\0\1\u0130\2\7"+
    "\1\0\7\7\22\0\4\7\5\0\1\7\5\0\3\7"+
    "\1\201\6\7\1\0\3\7\1\0\3\7\1\0\7\7"+
    "\22\0\4\7\5\0\1\7\11\0\1\64\66\0\5\7"+
    "\1\u0131\4\7\1\0\3\7\1\0\3\7\1\0\7\7"+
    "\22\0\4\7\5\0\1\7\1\0\37\361\1\362\1\u0132"+
    "\32\361\3\u0133\1\2\67\u0133\15\0\1\47\61\0\12\7"+
    "\1\0\1\u0134\2\7\1\0\3\7\1\0\7\7\22\0"+
    "\4\7\5\0\1\7\5\0\12\7\1\0\1\7\1\u0135"+
    "\1\7\1\0\3\7\1\0\7\7\22\0\4\7\5\0"+
    "\1\7\5\0\12\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\u0136\6\7\22\0\4\7\5\0\1\7\5\0\3\7"+
    "\1\u0137\6\7\1\0\1\u0138\2\7\1\0\3\7\1\0"+
    "\7\7\22\0\4\7\5\0\1\7\2\0\3\260\7\154"+
    "\1\u0139\2\154\1\0\3\154\1\0\3\154\1\0\7\154"+
    "\4\0\1\270\10\0\1\260\4\0\4\154\3\0\1\272"+
    "\1\0\1\154\2\0\3\260\12\154\1\0\3\154\1\u013a"+
    "\3\154\1\0\7\154\4\0\1\270\10\0\1\260\4\0"+
    "\2\154\1\u0100\1\154\3\0\1\272\1\0\1\154\2\0"+
    "\3\260\12\154\1\0\3\154\1\0\3\154\1\0\3\154"+
    "\1\u013b\3\154\4\0\1\270\10\0\1\260\4\0\4\154"+
    "\3\0\1\272\1\0\1\154\2\0\3\260\12\154\1\0"+
    "\3\154\1\0\3\154\1\0\6\154\1\u013c\4\0\1\270"+
    "\10\0\1\260\4\0\4\154\3\0\1\272\1\0\1\154"+
    "\21\0\1\u013d\1\0\1\u013e\37\0\1\u013e\20\0\1\u013f"+
    "\63\0\3\260\4\154\1\u0140\5\154\1\0\3\154\1\0"+
    "\3\154\1\0\7\154\4\0\1\270\10\0\1\260\4\0"+
    "\4\154\3\0\1\272\1\0\1\154\2\0\3\260\5\154"+
    "\1\u013b\4\154\1\0\3\154\1\0\3\154\1\0\7\154"+
    "\4\0\1\270\10\0\1\260\4\0\4\154\3\0\1\272"+
    "\1\0\1\154\5\0\1\u0101\62\0\1\272\1\0\1\u0101"+
    "\21\0\1\u0141\61\0\1\u0142\63\0\51\u0104\1\u0143\1\u0144"+
    "\20\u0104\52\u0105\1\u0145\1\u0105\1\u0143\16\u0105\1\0\3\260"+
    "\12\154\1\0\1\154\1\u0146\1\154\1\u013e\3\154\1\0"+
    "\7\154\4\0\1\270\10\0\1\260\4\0\2\154\1\u0147"+
    "\1\154\3\0\1\272\1\0\1\154\6\0\11\u0148\1\0"+
    "\3\u0148\1\0\3\u0148\1\0\7\u0148\22\0\4\u0148\10\0"+
    "\3\260\11\154\1\u0149\1\0\3\154\1\0\3\154\1\0"+
    "\7\154\4\0\1\270\10\0\1\260\4\0\4\154\3\0"+
    "\1\272\1\0\1\154\2\0\3\260\6\154\1\u014a\3\154"+
    "\1\0\3\154\1\0\3\154\1\0\3\154\1\u014a\3\154"+
    "\4\0\1\270\10\0\1\260\4\0\4\154\3\0\1\272"+
    "\1\0\1\154\2\0\3\260\1\154\1\u014b\10\154\1\0"+
    "\3\154\1\0\3\154\1\0\7\154\4\0\1\270\10\0"+
    "\1\260\4\0\4\154\3\0\1\272\1\0\1\154\2\0"+
    "\3\260\12\154\1\0\2\154\1\u014c\1\0\3\154\1\0"+
    "\7\154\4\0\1\270\10\0\1\260\4\0\4\154\3\0"+
    "\1\272\1\0\1\154\5\0\5\7\1\u014d\4\7\1\0"+
    "\3\7\1\0\3\7\1\0\7\7\22\0\4\7\5\0"+
    "\1\7\20\0\1\u0113\57\0\12\7\1\0\1\u0114\2\7"+
    "\1\0\3\7\1\0\7\7\22\0\4\7\5\0\1\7"+
    "\5\0\12\7\1\u014e\3\7\1\0\3\7\1\0\7\7"+
    "\22\0\1\7\1\u014f\2\7\5\0\1\7\5\0\12\7"+
    "\1\0\3\7\1\u0150\3\7\1\0\7\7\22\0\2\7"+
    "\1\u0151\1\7\5\0\1\7\5\0\2\7\1\u0152\7\7"+
    "\1\0\3\7\1\0\3\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\5\0\12\7\1\0\1\u0153\2\7\1\0"+
    "\3\7\1\0\7\7\22\0\4\7\5\0\1\7\6\0"+
    "\1\u0154\71\0\1\7\1\u0155\10\7\1\0\3\7\1\0"+
    "\3\7\1\0\7\7\22\0\4\7\5\0\1\7\5\0"+
    "\6\7\1\u0156\3\7\1\0\3\7\1\0\3\7\1\0"+
    "\7\7\22\0\4\7\5\0\1\7\10\0\1\u0157\67\0"+
    "\3\7\1\u0158\6\7\1\0\3\7\1\0\3\7\1\0"+
    "\7\7\22\0\4\7\5\0\1\7\5\0\12\7\1\0"+
    "\2\7\1\243\1\0\3\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\24\0\1\u0159\53\0\12\7\1\0\3\7"+
    "\1\0\1\u015a\2\7\1\0\7\7\22\0\4\7\5\0"+
    "\1\7\5\0\6\7\1\u015b\3\7\1\0\3\7\1\0"+
    "\3\7\1\0\7\7\22\0\4\7\5\0\1\7\12\0"+
    "\1\117\65\0\5\7\1\121\4\7\1\0\3\7\1\0"+
    "\3\7\1\0\7\7\22\0\4\7\5\0\1\7\13\0"+
    "\1\64\64\0\6\7\1\66\3\7\1\0\3\7\1\0"+
    "\3\7\1\0\7\7\22\0\4\7\5\0\1\7\15\0"+
    "\1\u015c\106\0\1\u015d\66\0\1\u015e\71\0\1\u015f\56\0"+
    "\1\u0160\67\0\6\7\1\233\3\7\1\0\3\7\1\0"+
    "\3\7\1\0\7\7\22\0\4\7\5\0\1\7\5\0"+
    "\12\7\1\0\3\7\1\0\1\7\1\321\1\7\1\0"+
    "\7\7\22\0\4\7\5\0\1\7\5\0\12\7\1\0"+
    "\3\7\1\0\1\66\2\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\21\0\1\u015e\56\0\12\7\1\0\1\7"+
    "\1\u0161\1\7\1\0\3\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\7\0\1\64\101\0\1\u015d\61\0\11\7"+
    "\1\u0162\1\0\3\7\1\0\3\7\1\0\7\7\22\0"+
    "\4\7\5\0\1\7\5\0\12\7\1\0\1\7\1\121"+
    "\1\7\1\0\3\7\1\0\7\7\22\0\4\7\5\0"+
    "\1\7\5\0\4\7\1\175\5\7\1\0\3\7\1\0"+
    "\3\7\1\0\7\7\22\0\4\7\5\0\1\7\20\0"+
    "\1\u0163\57\0\12\7\1\0\1\u0164\2\7\1\0\3\7"+
    "\1\0\7\7\22\0\4\7\5\0\1\7\5\0\12\7"+
    "\1\u0165\3\7\1\0\3\7\1\0\7\7\22\0\1\7"+
    "\1\u0166\2\7\5\0\1\7\5\0\10\7\1\u0167\1\7"+
    "\1\0\3\7\1\0\3\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\5\0\12\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\u0162\5\7\22\0\4\7\5\0\1\7"+
    "\5\0\12\7\1\0\3\7\1\0\1\7\1\u0161\1\7"+
    "\1\0\7\7\22\0\4\7\5\0\1\7\5\0\12\7"+
    "\1\0\3\7\1\0\1\u0168\2\7\1\0\7\7\22\0"+
    "\4\7\5\0\1\7\5\0\3\7\1\u0169\6\7\1\0"+
    "\3\7\1\0\3\7\1\0\7\7\22\0\4\7\5\0"+
    "\1\7\2\0\3\260\12\154\1\0\3\154\1\0\3\154"+
    "\1\u016a\7\154\4\0\1\270\10\0\1\260\4\0\3\154"+
    "\1\u016b\3\0\1\272\1\0\1\154\12\0\1\u016c\62\0"+
    "\3\260\12\154\1\0\3\154\1\0\3\154\1\0\1\u016d"+
    "\6\154\4\0\1\270\10\0\1\260\4\0\4\154\3\0"+
    "\1\272\1\0\1\154\33\0\1\u016e\62\0\1\u016f\37\0"+
    "\1\u016f\27\0\1\u0170\54\0\3\260\12\154\1\0\1\u0171"+
    "\2\154\1\0\3\154\1\0\7\154\4\0\1\270\10\0"+
    "\1\260\4\0\4\154\3\0\1\272\1\0\1\154\30\0"+
    "\1\u0172\53\0\1\u0173\151\0\1\272\3\0\2\u0104\2\0"+
    "\47\u0104\1\0\17\u0104\2\u0105\2\0\47\u0105\1\0\17\u0105"+
    "\1\0\3\260\12\154\1\0\3\154\1\0\3\154\1\0"+
    "\3\154\1\u0174\3\154\4\0\1\270\10\0\1\260\4\0"+
    "\4\154\3\0\1\272\1\0\1\154\2\0\3\260\12\154"+
    "\1\0\3\154\1\u016f\3\154\1\0\7\154\4\0\1\270"+
    "\10\0\1\260\4\0\2\154\1\u0175\1\154\3\0\1\272"+
    "\1\0\1\154\5\0\12\u0148\1\0\3\u0148\1\0\3\u0148"+
    "\1\0\7\u0148\13\0\1\u0176\6\0\4\u0148\5\0\1\u0148"+
    "\2\0\3\260\1\154\1\u0177\10\154\1\0\3\154\1\0"+
    "\3\154\1\0\7\154\4\0\1\270\10\0\1\260\4\0"+
    "\4\154\3\0\1\272\1\0\1\154\2\0\3\260\12\154"+
    "\1\0\1\u0178\2\154\1\0\3\154\1\0\7\154\4\0"+
    "\1\270\10\0\1\260\4\0\4\154\3\0\1\272\1\0"+
    "\1\154\2\0\3\260\3\154\1\u0179\6\154\1\0\3\154"+
    "\1\0\3\154\1\0\7\154\4\0\1\270\10\0\1\260"+
    "\4\0\4\154\3\0\1\272\1\0\1\154\5\0\1\7"+
    "\1\u017a\10\7\1\0\3\7\1\0\3\7\1\0\7\7"+
    "\22\0\4\7\5\0\1\7\12\0\1\u0113\65\0\5\7"+
    "\1\u0114\4\7\1\0\3\7\1\0\3\7\1\0\7\7"+
    "\22\0\4\7\5\0\1\7\23\0\1\u0113\37\0\1\u0113"+
    "\14\0\12\7\1\0\3\7\1\u0113\3\7\1\0\7\7"+
    "\22\0\2\7\1\u0114\1\7\5\0\1\7\5\0\7\7"+
    "\1\u017b\2\7\1\0\3\7\1\0\3\7\1\0\7\7"+
    "\22\0\4\7\5\0\1\7\5\0\12\7\1\0\3\7"+
    "\1\u017c\3\7\1\0\7\7\22\0\2\7\1\u017d\1\7"+
    "\5\0\1\7\6\0\1\u016c\71\0\1\7\1\u017e\10\7"+
    "\1\0\3\7\1\0\3\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\5\0\5\7\1\u017f\4\7\1\0\3\7"+
    "\1\0\3\7\1\0\7\7\22\0\4\7\5\0\1\7"+
    "\13\0\1\174\64\0\6\7\1\175\3\7\1\0\3\7"+
    "\1\0\3\7\1\0\7\7\22\0\4\7\5\0\1\7"+
    "\30\0\1\117\47\0\12\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\121\6\7\22\0\4\7\5\0\1\7\5\0"+
    "\5\7\1\u0180\4\7\1\0\3\7\1\0\3\7\1\0"+
    "\7\7\22\0\4\7\5\0\1\7\20\0\1\u0181\62\0"+
    "\1\u0182\102\0\1\u0183\65\0\1\u0184\104\0\1\u0185\52\0"+
    "\12\7\1\0\1\u0186\2\7\1\0\3\7\1\0\7\7"+
    "\22\0\4\7\5\0\1\7\5\0\3\7\1\u0187\6\7"+
    "\1\0\3\7\1\0\3\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\56\0\1\u0188\21\0\12\7\1\0\3\7"+
    "\1\0\3\7\1\0\7\7\17\0\1\u0188\2\0\4\7"+
    "\5\0\1\7\14\0\1\u0189\63\0\7\7\1\u0127\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\5\0\12\7\1\0\1\u018a\2\7\1\0"+
    "\3\7\1\0\7\7\22\0\4\7\5\0\1\7\5\0"+
    "\6\7\1\u018b\3\7\1\0\3\7\1\0\3\7\1\0"+
    "\7\7\22\0\4\7\5\0\1\7\5\0\12\7\1\0"+
    "\3\7\1\0\1\7\1\u018c\1\7\1\0\7\7\22\0"+
    "\4\7\5\0\1\7\17\0\1\u018d\42\0\1\u018d\12\0"+
    "\3\260\12\154\1\u018d\3\154\1\0\3\154\1\0\7\154"+
    "\4\0\1\270\10\0\1\260\4\0\1\154\1\u018e\2\154"+
    "\3\0\1\272\1\0\1\154\2\0\3\260\12\154\1\0"+
    "\1\372\2\154\1\0\3\154\1\0\7\154\4\0\1\270"+
    "\10\0\1\260\4\0\4\154\3\0\1\272\1\0\1\154"+
    "\20\0\1\u018f\71\0\1\u0190\42\0\1\u0190\33\0\1\u016c"+
    "\37\0\1\u016c\11\0\3\260\12\154\1\0\3\154\1\u016c"+
    "\3\154\1\0\7\154\4\0\1\270\10\0\1\260\4\0"+
    "\2\154\1\u013b\1\154\3\0\1\272\1\0\1\154\20\0"+
    "\1\u0143\75\0\1\u0172\37\0\1\u0172\11\0\3\260\12\154"+
    "\1\0\1\u0191\2\154\1\0\3\154\1\0\7\154\4\0"+
    "\1\270\10\0\1\260\4\0\4\154\3\0\1\272\1\0"+
    "\1\154\2\0\3\260\12\154\1\u0190\3\154\1\0\3\154"+
    "\1\0\7\154\4\0\1\270\10\0\1\260\4\0\1\154"+
    "\1\u0192\2\154\3\0\1\272\1\0\1\154\71\0\1\u0193"+
    "\3\0\3\260\12\154\1\0\1\154\1\u0194\1\154\1\0"+
    "\3\154\1\0\7\154\4\0\1\270\10\0\1\260\4\0"+
    "\4\154\3\0\1\272\1\0\1\154\2\0\3\260\12\154"+
    "\1\0\1\154\1\u0195\1\154\1\0\3\154\1\0\7\154"+
    "\4\0\1\270\10\0\1\260\4\0\4\154\3\0\1\272"+
    "\1\0\1\154\2\0\3\260\4\154\1\u0171\5\154\1\0"+
    "\3\154\1\0\3\154\1\0\7\154\4\0\1\270\10\0"+
    "\1\260\4\0\4\154\3\0\1\272\1\0\1\154\5\0"+
    "\6\7\1\u0196\3\7\1\0\3\7\1\0\3\7\1\0"+
    "\7\7\22\0\4\7\5\0\1\7\5\0\12\7\1\0"+
    "\3\7\1\0\1\7\1\u0114\1\7\1\0\7\7\22\0"+
    "\4\7\5\0\1\7\16\0\1\u0197\61\0\11\7\1\u0198"+
    "\1\0\3\7\1\0\3\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\5\0\12\7\1\u0199\3\7\1\0\3\7"+
    "\1\0\7\7\22\0\1\7\1\u019a\2\7\5\0\1\7"+
    "\5\0\12\7\1\0\1\65\2\7\1\0\3\7\1\0"+
    "\7\7\22\0\4\7\5\0\1\7\24\0\1\u019b\61\0"+
    "\1\117\65\0\1\u019c\104\0\1\u0185\66\0\1\335\63\0"+
    "\1\7\1\u019d\10\7\1\0\3\7\1\0\3\7\1\0"+
    "\7\7\22\0\4\7\5\0\1\7\5\0\6\7\1\121"+
    "\3\7\1\0\3\7\1\0\3\7\1\0\7\7\22\0"+
    "\4\7\5\0\1\7\52\0\1\u019e\2\0\1\u019e\41\0"+
    "\1\64\53\0\12\7\1\0\3\7\1\0\1\u019f\2\7"+
    "\1\0\7\7\22\0\4\7\5\0\1\7\5\0\12\7"+
    "\1\0\1\u018c\2\7\1\0\3\7\1\0\7\7\22\0"+
    "\4\7\5\0\1\7\5\0\7\7\1\341\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\7\7\22\0\4\7\5\0"+
    "\1\7\20\0\1\u016c\54\0\3\260\12\154\1\0\1\u013b"+
    "\2\154\1\0\3\154\1\0\7\154\4\0\1\270\10\0"+
    "\1\260\4\0\4\154\3\0\1\272\1\0\1\154\21\0"+
    "\1\u016c\65\0\1\u01a0\60\0\3\260\12\154\1\0\1\154"+
    "\1\u013b\1\154\1\0\3\154\1\0\7\154\4\0\1\270"+
    "\10\0\1\260\4\0\4\154\3\0\1\272\1\0\1\154"+
    "\2\0\3\260\7\154\1\u01a1\2\154\1\0\3\154\1\0"+
    "\3\154\1\0\7\154\4\0\1\270\10\0\1\260\4\0"+
    "\4\154\3\0\1\272\1\0\1\154\2\0\3\260\3\154"+
    "\1\u01a2\6\154\1\0\1\u01a3\2\154\1\0\3\154\1\0"+
    "\7\154\4\0\1\270\10\0\1\260\4\0\4\154\3\0"+
    "\1\272\1\0\1\154\2\0\3\260\12\154\1\0\1\154"+
    "\1\u01a4\1\154\1\0\3\154\1\0\7\154\4\0\1\270"+
    "\10\0\1\260\4\0\4\154\3\0\1\272\1\0\1\154"+
    "\5\0\7\7\1\u01a5\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\7\7\22\0\4\7\5\0\1\7\10\0\1\u01a6"+
    "\67\0\3\7\1\u01a7\6\7\1\0\3\7\1\0\3\7"+
    "\1\0\7\7\22\0\4\7\5\0\1\7\14\0\1\u01a8"+
    "\63\0\7\7\1\u01a9\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\7\7\22\0\4\7\5\0\1\7\12\0\1\320"+
    "\74\0\1\u01aa\63\0\7\7\1\u01ab\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\7\7\22\0\4\7\5\0\1\7"+
    "\6\0\11\u01ac\1\0\3\u01ac\1\0\3\u01ac\1\0\7\u01ac"+
    "\22\0\4\u01ac\13\0\5\7\1\321\4\7\1\0\3\7"+
    "\1\0\3\7\1\0\7\7\22\0\4\7\5\0\1\7"+
    "\24\0\1\u016c\50\0\3\260\12\154\1\0\3\154\1\0"+
    "\1\u013b\2\154\1\0\7\154\4\0\1\270\10\0\1\260"+
    "\4\0\4\154\3\0\1\272\1\0\1\154\2\0\3\260"+
    "\12\154\1\0\3\154\1\0\3\154\1\0\2\154\1\u01ad"+
    "\4\154\4\0\1\270\10\0\1\260\4\0\4\154\3\0"+
    "\1\272\1\0\1\154\2\0\3\260\12\154\1\0\3\154"+
    "\1\u01ae\3\154\1\0\7\154\4\0\1\270\10\0\1\260"+
    "\4\0\2\154\1\u01af\1\154\3\0\1\272\1\0\1\154"+
    "\2\0\3\260\7\154\1\u01b0\2\154\1\0\3\154\1\0"+
    "\3\154\1\0\7\154\4\0\1\270\10\0\1\260\4\0"+
    "\4\154\3\0\1\272\1\0\1\154\5\0\10\7\1\u01b1"+
    "\1\7\1\0\3\7\1\0\3\7\1\0\7\7\22\0"+
    "\4\7\5\0\1\7\13\0\1\u010d\64\0\6\7\1\u010e"+
    "\3\7\1\0\3\7\1\0\3\7\1\0\7\7\22\0"+
    "\4\7\5\0\1\7\24\0\1\u0113\53\0\12\7\1\0"+
    "\3\7\1\0\1\u0114\2\7\1\0\7\7\22\0\4\7"+
    "\5\0\1\7\24\0\1\u0182\53\0\12\7\1\0\3\7"+
    "\1\0\1\u0187\2\7\1\0\7\7\22\0\4\7\5\0"+
    "\1\7\5\0\12\u01ac\1\0\3\u01ac\1\0\3\u01ac\1\0"+
    "\7\u01ac\13\0\1\u01b2\2\0\1\u01b2\3\0\4\u01ac\5\0"+
    "\1\u01ac\2\0\3\260\1\154\1\u01b3\10\154\1\0\3\154"+
    "\1\0\3\154\1\0\7\154\4\0\1\270\10\0\1\260"+
    "\4\0\4\154\3\0\1\272\1\0\1\154\16\0\1\u01b4"+
    "\56\0\3\260\11\154\1\u01b5\1\0\3\154\1\0\3\154"+
    "\1\0\7\154\4\0\1\270\10\0\1\260\4\0\4\154"+
    "\3\0\1\272\1\0\1\154\2\0\3\260\12\154\1\0"+
    "\1\154\1\u01b6\1\154\1\0\3\154\1\0\7\154\4\0"+
    "\1\270\10\0\1\260\4\0\4\154\3\0\1\272\1\0"+
    "\1\154\5\0\11\7\1\u01b7\1\0\3\7\1\0\3\7"+
    "\1\0\7\7\22\0\4\7\5\0\1\7\57\0\1\u01b8"+
    "\15\0\3\260\11\154\1\u01b9\1\0\3\154\1\0\3\154"+
    "\1\0\7\154\4\0\1\270\10\0\1\260\4\0\4\154"+
    "\3\0\1\272\1\0\1\154\14\0\1\u01ba\60\0\3\260"+
    "\7\154\1\u01bb\2\154\1\0\3\154\1\0\3\154\1\0"+
    "\7\154\4\0\1\270\10\0\1\260\4\0\4\154\3\0"+
    "\1\272\1\0\1\154\2\0\3\260\10\154\1\u01bc\1\154"+
    "\1\0\3\154\1\0\3\154\1\0\7\154\4\0\1\270"+
    "\10\0\1\260\4\0\4\154\3\0\1\272\1\0\1\154"+
    "\5\0\12\7\1\u01bd\3\7\1\0\3\7\1\0\7\7"+
    "\22\0\1\7\1\u01be\2\7\5\0\1\7\2\0\3\u01b8"+
    "\45\0\1\u01bf\1\0\1\u01b8\1\u01c0\7\0\1\u01c1\7\0"+
    "\3\260\7\154\1\u01c2\2\154\1\0\3\154\1\0\3\154"+
    "\1\0\7\154\4\0\1\270\10\0\1\260\4\0\4\154"+
    "\3\0\1\272\1\0\1\154\24\0\1\u01c3\50\0\3\260"+
    "\12\154\1\0\3\154\1\0\1\u01c4\2\154\1\0\7\154"+
    "\4\0\1\270\10\0\1\260\4\0\4\154\3\0\1\272"+
    "\1\0\1\154\2\0\3\260\12\154\1\0\3\154\1\u01c5"+
    "\3\154\1\0\7\154\4\0\1\270\10\0\1\260\4\0"+
    "\2\154\1\u01c6\1\154\3\0\1\272\1\0\1\154\11\0"+
    "\1\u01c7\66\0\4\7\1\u01c8\5\7\1\0\3\7\1\0"+
    "\3\7\1\0\7\7\22\0\4\7\5\0\1\7\1\0"+
    "\51\u01bf\1\u01c9\1\u01ca\20\u01bf\52\u01c0\1\u01cb\1\u01c0\1\u01c9"+
    "\16\u01c0\5\0\11\u01cc\1\0\3\u01cc\1\0\3\u01cc\1\0"+
    "\7\u01cc\22\0\4\u01cc\10\0\3\260\12\154\1\0\3\154"+
    "\1\u01cd\3\154\1\0\7\154\4\0\1\270\10\0\1\260"+
    "\4\0\2\154\1\u01ce\1\154\3\0\1\272\1\0\1\154"+
    "\23\0\1\u01cf\37\0\1\u01cf\11\0\3\260\12\154\1\0"+
    "\3\154\1\u01cf\3\154\1\0\7\154\4\0\1\270\10\0"+
    "\1\260\4\0\2\154\1\u01d0\1\154\3\0\1\272\1\0"+
    "\1\154\35\0\1\64\37\0\3\260\12\154\1\0\3\154"+
    "\1\0\3\154\1\0\5\154\1\u014a\1\154\4\0\1\270"+
    "\10\0\1\260\4\0\4\154\3\0\1\272\1\0\1\154"+
    "\20\0\1\u01d1\57\0\12\7\1\0\1\14\2\7\1\0"+
    "\3\7\1\0\7\7\22\0\4\7\5\0\1\7\60\0"+
    "\1\u01d2\13\0\2\u01bf\2\0\47\u01bf\1\0\17\u01bf\2\u01c0"+
    "\2\0\47\u01c0\1\0\17\u01c0\1\0\3\u01d3\12\u01cc\1\0"+
    "\3\u01cc\1\0\3\u01cc\1\0\7\u01cc\4\0\1\u01d4\10\0"+
    "\1\u01d3\3\0\1\u01d2\4\u01cc\5\0\1\u01cc\12\0\1\u01d5"+
    "\62\0\3\260\5\154\1\u01d6\4\154\1\0\3\154\1\0"+
    "\3\154\1\0\7\154\4\0\1\270\10\0\1\260\4\0"+
    "\4\154\3\0\1\272\1\0\1\154\20\0\1\u01d7\54\0"+
    "\3\260\12\154\1\0\1\u01d8\2\154\1\0\3\154\1\0"+
    "\7\154\4\0\1\270\10\0\1\260\4\0\4\154\3\0"+
    "\1\272\1\0\1\154\21\0\1\64\53\0\3\u01d3\36\0"+
    "\1\u01d4\10\0\1\u01d3\20\0\3\u01d4\1\u01d9\4\0\1\u01da"+
    "\16\0\1\u01db\20\0\1\u01bf\1\0\1\u01d4\1\u01c0\14\0"+
    "\1\u01d9\6\0\1\u01dc\66\0\3\260\1\154\1\u01dd\10\154"+
    "\1\0\3\154\1\0\3\154\1\0\7\154\4\0\1\270"+
    "\10\0\1\260\4\0\4\154\3\0\1\272\1\0\1\154"+
    "\6\0\1\u01de\66\0\3\260\1\154\1\u01df\10\154\1\0"+
    "\3\154\1\0\3\154\1\0\7\154\4\0\1\270\10\0"+
    "\1\260\4\0\4\154\3\0\1\272\1\0\1\154\5\0"+
    "\1\u01d9\52\0\1\u01d2\11\0\1\u01d9\21\0\1\u01e0\61\0"+
    "\1\u01e1\107\0\1\u01e2\47\0\3\260\12\154\1\0\3\154"+
    "\1\0\1\154\1\u01e3\1\154\1\0\7\154\4\0\1\270"+
    "\10\0\1\260\4\0\4\154\3\0\1\272\1\0\1\154"+
    "\7\0\1\u01e4\65\0\3\260\2\154\1\u01e5\7\154\1\0"+
    "\3\154\1\0\3\154\1\0\7\154\4\0\1\270\10\0"+
    "\1\260\4\0\4\154\3\0\1\272\1\0\1\154\30\0"+
    "\1\u01e6\53\0\1\u01e7\71\0\1\u01e8\64\0\3\260\3\154"+
    "\1\u01e9\6\154\1\0\3\154\1\0\3\154\1\0\7\154"+
    "\4\0\1\270\10\0\1\260\4\0\4\154\3\0\1\272"+
    "\1\0\1\154\20\0\1\u01ea\54\0\3\260\12\154\1\0"+
    "\1\u01eb\2\154\1\0\3\154\1\0\7\154\4\0\1\270"+
    "\10\0\1\260\4\0\4\154\3\0\1\272\1\0\1\154"+
    "\20\0\1\u01c9\75\0\1\u01e6\37\0\1\u01e6\21\0\1\u01ec"+
    "\62\0\3\260\5\154\1\u01ed\4\154\1\0\3\154\1\0"+
    "\3\154\1\0\7\154\4\0\1\270\10\0\1\260\4\0"+
    "\4\154\3\0\1\272\1\0\1\154\10\0\1\u01ee\64\0"+
    "\3\260\3\154\1\u01ef\6\154\1\0\3\154\1\0\3\154"+
    "\1\0\7\154\4\0\1\270\10\0\1\260\4\0\4\154"+
    "\3\0\1\272\1\0\1\154\10\0\1\u016c\64\0\3\260"+
    "\3\154\1\u013b\6\154\1\0\3\154\1\0\3\154\1\0"+
    "\7\154\4\0\1\270\10\0\1\260\4\0\4\154\3\0"+
    "\1\272\1\0\1\154\25\0\1\u01c7\47\0\3\260\12\154"+
    "\1\0\3\154\1\0\1\154\1\u01f0\1\154\1\0\7\154"+
    "\4\0\1\270\10\0\1\260\4\0\4\154\3\0\1\272"+
    "\1\0\1\154\2\0\3\260\12\154\1\0\1\u01f1\2\154"+
    "\1\0\3\154\1\0\7\154\4\0\1\270\10\0\1\260"+
    "\4\0\4\154\3\0\1\272\1\0\1\154\2\0\3\260"+
    "\12\154\1\0\1\154\1\u014a\1\154\1\0\3\154\1\0"+
    "\7\154\4\0\1\270\10\0\1\260\4\0\4\154\3\0"+
    "\1\272\1\0\1\154\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28320];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\32\1\1\11\10\1\1\11\7\1\1\0"+
    "\4\1\1\11\2\1\1\0\10\1\3\0\10\1\2\0"+
    "\2\1\1\0\5\1\1\0\5\1\6\0\1\11\3\0"+
    "\12\1\2\0\11\1\1\0\1\1\1\0\11\1\1\0"+
    "\2\1\6\0\11\1\2\0\6\1\1\0\1\1\1\0"+
    "\2\1\2\0\1\1\2\0\6\1\1\0\4\1\1\0"+
    "\2\1\1\0\1\1\1\0\5\1\1\0\5\1\1\0"+
    "\1\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\2\1\4\0\2\1\2\0\10\1\2\0\3\1\1\0"+
    "\2\1\1\0\1\1\2\0\1\1\1\0\10\1\2\0"+
    "\3\1\4\0\1\1\1\0\5\1\1\0\5\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\5\0\3\1\1\0\1\1\2\0\3\1\1\0"+
    "\2\1\1\11\1\0\6\1\1\0\2\1\3\0\1\1"+
    "\2\0\1\1\2\0\2\1\1\0\5\1\1\0\1\1"+
    "\1\0\3\1\1\0\2\1\1\0\1\1\1\0\2\1"+
    "\5\0\2\1\1\0\1\1\1\0\4\1\1\0\1\1"+
    "\1\11\1\1\3\0\1\1\2\0\2\1\1\0\5\1"+
    "\1\0\4\1\2\0\1\1\2\0\2\1\2\0\3\1"+
    "\1\0\1\1\2\0\2\1\1\11\3\1\1\0\1\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\1\0\5\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\3\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\5\0\1\1\1\0\1\1"+
    "\1\0\1\11\3\0\1\1\1\0\1\1\4\0\1\1"+
    "\1\0\1\1\3\0\1\1\1\0\1\1\3\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[497];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme="";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  lexicalRules(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 266) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme = Integer.toString(yyline + 1) + "," + yytext(); return ERROR;
            }
          case 13: break;
          case 2: 
            { lexeme=yytext(); return WHITESPACE;
            }
          case 14: break;
          case 3: 
            { lexeme = yytext(); return TYPES_VAL;
            }
          case 15: break;
          case 4: 
            { lexeme = yytext(); return ID;
            }
          case 16: break;
          case 5: 
            { lexeme = yytext(); return TYPES_OP;
            }
          case 17: break;
          case 6: 
            { lexeme=yytext(); return SYMBOLS;
            }
          case 18: break;
          case 7: 
            { lexeme = yytext(); return COMMENTS;
            }
          case 19: break;
          case 8: 
            { lexeme=yytext(); return LOWER_CASE_WORDS;
            }
          case 20: break;
          case 9: 
            { lexeme = yytext(); return VAR;
            }
          case 21: break;
          case 10: 
            { lexeme=yytext(); return UPPER_CASE_VAR_CONST;
            }
          case 22: break;
          case 11: 
            { lexeme=yytext(); return ACCESS_DB;
            }
          case 23: break;
          case 12: 
            { lexeme=yytext(); return CONSTANTS_DEFINE;
            }
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
